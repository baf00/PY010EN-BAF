After completing this lab you will be able to:

Import and use the numpy library
Perform operations with numpy

What is Numpy? 

NumPy is a Python library used for working with arrays, linear algebra, fourier transform, and matrices. NumPy stands for Numerical Python and it is an open source project. The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.

Arrays are very frequently used in data science, where speed and resources are very important.

NumPy is usually imported under the np alias.

It's usually fixed in size and each element is of the same type. We can cast a list to a numpy array by first importing numpy:

# import numpy library

import numpy as np 

# Create a numpy array

a = np.array([0, 1, 2, 3, 4])
a

array([0, 1, 2, 3, 4])

Each element is of the same type, in this case integers:

a[0]:0, a[1]:1... a[4]:4 - As with lists, we can access each element via a square bracket:

# Print each element

print("a[0]:", a[0])
print("a[1]:", a[1])
print("a[2]:", a[2])
print("a[3]:", a[3])
print("a[4]:", a[4])


a[0]: 0
a[1]: 1
a[2]: 2
a[3]: 3
a[4]: 4

print(np.__version__)
1.26.4

If we check the type of the array we get umpy.ndarray

# Check the type of the array

type(a)
numpy.ndarray

As numpy arrays contain data of the same type, we can use the attribute "dtype" to obtain the data type of the array’s elements. In this case, it's a 64-bit integer:

# Check the type of the values stored in numpy array

a.dtype
dtype('int32')

Try it yourself¶
Check the type of the array and Value type for the given array c

b = np.array([3.1, 11.02, 6.2, 213.2, 5.2])

# Enter your code here

b = np.array([3.1, 11.02, 6.2, 213.2, 5.2])

# Enter your code here
# Check the type of the array

type(b)

# Check the type of the values stored in numpy array

b.dtype


Click here for the solution
type(b)
    
b.dtype 
    
If we examine the attribute dtype we see float 64, as the elements are not integers:

Assign value¶

We can change the value of the array. Consider the array c:

# Create numpy array

c = np.array([20, 1, 2, 3, 4])
c

array([20,  1,  2,  3,  4])

We can change the first element of the array to 100 as follows:

# Assign the first element to 100

c[0] = 100
c

array([100,   1,   2,   3,   4])

We can change the 5th element of the array to 0 as follows:

# Assign the 5th element to 0

c[4] = 0
c

array([100,   1,   2,   3,   0])

Try it yourself¶
Assign the value 20 for the second element in the given array.

a = np.array([10, 2, 30, 40,50])

# Enter your code here
# Assign the 2nd element to 20

a[1] = 20
a

array([10, 20, 30, 40, 50])

Slicing

Like lists, we can slice the numpy array. Slicing in python means taking the elements from the given index to another given index.

We pass slice like this: [start:end].The element at end index is not being included in the output.

We can select the elements from 1 to 3 and assign it to a new numpy array d as follows:

# Slicing the numpy array c - array([100,   1,   2,   3,   0])


d = c[1:4]
d

array([1, 2, 3])

We can assign the corresponding indexes to new values as follows:

# Set the fourth element and fifth element to 300 and 400

c[3:5] = 300, 400
c

array([100,   1,   2, 300, 400])

We can also define the steps in slicing, like this: [start:end:step].

arr = np.array([1, 2, 3, 4, 5, 6, 7])

print(arr[1:5:2])
[2 4]

If we don't pass start its considered 0

print(arr[:4])
[1 2 3 4]

If we don't pass end it considers till the length of array.
print(arr[4:])
[5 6 7]

If we don't pass step its considered 1
print(arr[1:5:])
[2 3 4 5]

Try it yourself¶
Print the even elements in the given array.

# Enter your code here
print(arr[1:8:2])

[2 4 6 8]

Assign Value with List¶

Similarly, we can use a list to select more than one specific index. The list select contains several values:

# Create the index list

select = [0, 2, 3, 4]
select

[0, 2, 3, 4]

We can use the list as an argument in the brackets. The output is the elements corresponding to the particular indexes:

# Use List to select elements

d = c[select]
d

array([100,   2, 300, 400])

We can assign the specified elements to a new value. For example, we can assign the values to 100 000 as follows:

# Assign the specified elements to new value

c[select] = 100000
c

array([100000,      1, 100000, 100000, 100000])


Other Attributes¶

Let's review some basic array attributes using the array a:

# Create a numpy array

a = np.array([0, 1, 2, 3, 4])
a

array([0, 1, 2, 3, 4])

The attribute <code>size</code> is the number of elements in the array:

# Get the size of numpy array

a.size
5

The next two attributes will make more sense when we get to higher dimensions but let's review them. The attribute ndim represents the number of array dimensions, or the rank of the array. In this case, one:

# Get the number of dimensions of numpy array

a.ndim
1

The attribute shape is a tuple of integers indicating the size of the array in each dimension:

# Get the shape/size of numpy array

a.shape

(5,)

Try it yourself
Find the size ,dimension and shape for the given array b

b = np.array([10, 20, 30, 40, 50, 60, 70])

# Enter your code here
b = np.array([10, 20, 30, 40, 50, 60, 70])

# Enter your code here

# Get the size of numpy array
b.size
# Get the number of dimensions of numpy array
b.ndim
# Get the shape/size of numpy array
b.shape


Numpy Statistical Functions

# Create a numpy array

a = np.array([1, -1, 1, -1])

# Get the mean of numpy array

mean = a.mean()
mean
0.0

# Get the standard deviation of numpy array

standard_deviation=a.std()
standard_deviation
1.0

# Create a numpy array

b = np.array([-1, 2, 3, 4, 5])
b
array([-1,  2,  3,  4,  5])

# Get the biggest value in the numpy array

max_b = b.max()
max_b

5

# Get the smallest value in the numpy array

min_b = b.min()
min_b

-1

Try it yourself¶
Find the sum of maximum and minimum value in the given numpy array

c = np.array([-10, 201, 43, 94, 502])

# Enter your code here
# Get the biggest value in the numpy array

max_c = c.max()
max_c
# Get the smallest value in the numpy array

min_c = c.min()
min_c
sum = max_c + min_c
sum

492

Numpy Array Operations¶
You could use arithmetic operators directly between NumPy arrays

Array Addition¶

Consider the numpy array u:

u = np.array([1, 0])
u

array([1, 0])

Consider the numpy array v:

v = np.array([0, 1])
v

array([0, 1])

We can add the two arrays and assign it to z:

# Numpy Array Addition

z = np.add(u, v)
z

array([1, 1])

The operation is equivalent to vector addition:

# Plotting functions


import time 
import sys
import numpy as np 

import matplotlib.pyplot as plt


def Plotvec1(u, z, v):
    
    ax = plt.axes() # to generate the full window axes
    ax.arrow(0, 0, *u, head_width=0.05, color='r', head_length=0.1)# Add an arrow to the  U Axes with arrow head width 0.05, color red and arrow head length 0.1
    plt.text(*(u + 0.1), 'u')#Adds the text u to the Axes 
    
    ax.arrow(0, 0, *v, head_width=0.05, color='b', head_length=0.1)# Add an arrow to the  v Axes with arrow head width 0.05, color red and arrow head length 0.1
    plt.text(*(v + 0.1), 'v')#Adds the text v to the Axes 
    
    ax.arrow(0, 0, *z, head_width=0.05, head_length=0.1)
    plt.text(*(z + 0.1), 'z')#Adds the text z to the Axes 
    plt.ylim(-2, 2)#set the ylim to bottom(-2), top(2)
    plt.xlim(-2, 2)#set the xlim to left(-2), right(2)

# Plot numpy arrays

Plotvec1(u, z, v)


Try it yourself
Perform addition operation on the given numpy array arr1 and arr2:

arr1 = np.array([10, 11, 12, 13, 14, 15])
arr2 = np.array([20, 21, 22, 23, 24, 25])

# Enter your code here
# Numpy Array Addition

arr3 = np.add(arr1, arr2)
arr3

array([30, 32, 34, 36, 38, 40])


Array Subtraction

Consider the numpy array a:

a = np.array([10, 20, 30])
a
array([10, 20, 30])

Consider the numpy array b:


b = np.array([5, 10, 15])
b

array([ 5, 10, 15])

We can subtract the two arrays and assign it to c:

c = np.subtract(a, b)

print(c)

[ 5 10 15]


Try it yourself
Perform subtraction operation on the given numpy array arr1 and arr2:

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([20, 21, 22, 23, 24, 25])

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([20, 21, 22, 23, 24, 25])

# Enter your code here
# We can subtract the two arrays and assign it to c:

arr3 = np.subtract(arr1, arr2)

print(arr3)

[-10  -1   8  17  26  35]


Array Multiplication

Consider the vector numpy array y:

# Create a numpy array

x = np.array([1, 2])
x
array([1, 2])

# Create a numpy array

y = np.array([2, 1])
y

array([2, 1])


We can multiply every element in the array by 2:

# Numpy Array Multiplication

z = np.multiply(x, y)
z

array([2, 2])

This is equivalent to multiplying a vector by a scaler:

Try it yourself¶
Perform multiply operation on the given numpy array arr1 and arr2:

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([2, 1, 2, 3, 4, 5])

# Enter your code here
# Numpy Array Multiplication

arr3 = np.multiply(arr1, arr2)
arr3

array([ 20,  20,  60, 120, 200, 300])

Array Division¶

Consider the vector numpy array a:
a = np.array([10, 20, 30])
a
array([10, 20, 30])

Consider the vector numpy array b:
b = np.array([2, 10, 5])
b
array([ 2, 10,  5])

We can divide the two arrays and assign it to c:

c = np.divide(a, b)
c
array([5., 2., 6.])

Try it yourself
Perform division operation on the given numpy array arr1 and arr2:

arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 5, 10, 8, 2, 33])

# Enter your code here
arr3 = np.divide(arr1, arr2)
arr3

array([ 3.33333333,  4.        ,  3.        ,  5.        , 25.        ,
        1.81818182])




