edX - Skills Network Logo

1D Numpy in Python¶
Estimated time needed: 40 minutes

Objectives
After completing this lab you will be able to:

Import and use the numpy library
Perform operations with numpy

Table of Contents

What is Numpy?
Type
Assign Value
Slicing
Assign Value with List
Other Attributes
Numpy Array Operations
Array Addition
Array Multiplication
Product of Two Numpy Arrays
Dot Product
Adding Constant to a Numpy Array
Mathematical Functions
Linspace


What is Numpy?¶
NumPy is a Python library used for working with arrays, linear algebra, fourier transform, and matrices. NumPy stands for Numerical Python and it is an open source project. The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.

Arrays are very frequently used in data science, where speed and resources are very important.

NumPy is usually imported under the np alias.

It's usually fixed in size and each element is of the same type. We can cast a list to a numpy array by first importing numpy:

# import numpy library

import numpy as np 

We then cast the list as follows:

# Create a numpy array

a = np.array([0, 1, 2, 3, 4])
a
array([0, 1, 2, 3, 4])

Each element is of the same type, in this case integers:
As with lists, we can access each element via a square bracket:

# Print each element

print("a[0]:", a[0])
print("a[1]:", a[1])
print("a[2]:", a[2])
print("a[3]:", a[3])
print("a[4]:", a[4])


a[0]: 0
a[1]: 1
a[2]: 2
a[3]: 3
a[4]: 4

Checking NumPy Version
The version string is stored under version attribute.

print(np.__version__)

1.26.4

Type

If we check the type of the array we get numpy.ndarray:
numpy.ndarray

As numpy arrays contain data of the same type, we can use the attribute "dtype" to obtain the data type of the array's elecmens. In this case, it's 64-bit integer. 

# Check the type of the values stored in numpy array

a.dtype

dtype('int32')

Try it yourself
Check the type of the array and Value type for the given array c

b = np.array([3.1, 11.02, 6.2, 213.2, 5.2])

# Enter your code here
b.dtype

dtype('float64')
Click here for the solution
type(b)
    
b.dtype 
    
If we examine the attribute dtype we see float 64, as the elements are not integers:

Assign value
We can change the value of the array. Consider the array c:

# Create numpy array

c = np.array([20, 1, 2, 3, 4])
c

array([20,  1,  2,  3,  4])

We can change the first element of the array to 100 as follows:
# Assign the first element to 100

c[0] = 100
c

array([100,   1,   2,   3,   4])

We can change the 5th element of the array to 0 as follows:

# Assign the 5th element to 0

c[4] = 0
c

array([100,   1,   2,   3,   0])

Try it yourself
Assign the value 20 for the second element in the given array.

a = np.array([10, 2, 30, 40,50])

# Enter your code here
a[1] = 20
a

array([10, 20, 30, 40, 50])

Click here for the solution
a[1]=20
a





